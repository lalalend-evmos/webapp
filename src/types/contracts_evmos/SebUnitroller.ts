/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Failure = ContractEventLog<{
  error: string;
  info: string;
  detail: string;
  0: string;
  1: string;
  2: string;
}>;
export type LiquidateSEB = ContractEventLog<{
  liquidator: string;
  borrower: string;
  repayAmount: string;
  nTokenCollateral: string;
  seizeTokens: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type MintFee = ContractEventLog<{
  minter: string;
  feeAmount: string;
  0: string;
  1: string;
}>;
export type MintSEB = ContractEventLog<{
  minter: string;
  mintSEBAmount: string;
  0: string;
  1: string;
}>;
export type NewComptroller = ContractEventLog<{
  oldComptroller: string;
  newComptroller: string;
  0: string;
  1: string;
}>;
export type NewTreasuryAddress = ContractEventLog<{
  oldTreasuryAddress: string;
  newTreasuryAddress: string;
  0: string;
  1: string;
}>;
export type NewTreasuryGuardian = ContractEventLog<{
  oldTreasuryGuardian: string;
  newTreasuryGuardian: string;
  0: string;
  1: string;
}>;
export type NewTreasuryPercent = ContractEventLog<{
  oldTreasuryPercent: string;
  newTreasuryPercent: string;
  0: string;
  1: string;
}>;
export type RepaySEB = ContractEventLog<{
  payer: string;
  borrower: string;
  repaySEBAmount: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SebUnitroller extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SebUnitroller;
  clone(): SebUnitroller;
  methods: {
    _become(unitroller: string): NonPayableTransactionObject<void>;

    _setComptroller(comptroller_: string): NonPayableTransactionObject<string>;

    _setTreasuryData(
      newTreasuryGuardian: string,
      newTreasuryAddress: string,
      newTreasuryPercent: number | string | BN
    ): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    comptroller(): NonPayableTransactionObject<string>;

    getBlockNumber(): NonPayableTransactionObject<string>;

    getMintableSEB(minter: string): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getSEBAddress(): NonPayableTransactionObject<string>;

    initialize(): NonPayableTransactionObject<void>;

    isMiaSEBInitialized(): NonPayableTransactionObject<boolean>;

    liquidateSEB(
      borrower: string,
      repayAmount: number | string | BN,
      nTokenCollateral: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    miaInitialIndex(): NonPayableTransactionObject<string>;

    miaSEBMinterIndex(arg0: string): NonPayableTransactionObject<string>;

    miaSEBState(): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    mintSEB(
      mintSEBAmount: number | string | BN
    ): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingSEBControllerImplementation(): NonPayableTransactionObject<string>;

    repaySEB(
      repaySEBAmount: number | string | BN
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    sebControllerImplementation(): NonPayableTransactionObject<string>;

    treasuryAddress(): NonPayableTransactionObject<string>;

    treasuryGuardian(): NonPayableTransactionObject<string>;

    treasuryPercent(): NonPayableTransactionObject<string>;
  };
  events: {
    Failure(cb?: Callback<Failure>): EventEmitter;
    Failure(options?: EventOptions, cb?: Callback<Failure>): EventEmitter;

    LiquidateSEB(cb?: Callback<LiquidateSEB>): EventEmitter;
    LiquidateSEB(
      options?: EventOptions,
      cb?: Callback<LiquidateSEB>
    ): EventEmitter;

    MintFee(cb?: Callback<MintFee>): EventEmitter;
    MintFee(options?: EventOptions, cb?: Callback<MintFee>): EventEmitter;

    MintSEB(cb?: Callback<MintSEB>): EventEmitter;
    MintSEB(options?: EventOptions, cb?: Callback<MintSEB>): EventEmitter;

    NewComptroller(cb?: Callback<NewComptroller>): EventEmitter;
    NewComptroller(
      options?: EventOptions,
      cb?: Callback<NewComptroller>
    ): EventEmitter;

    NewTreasuryAddress(cb?: Callback<NewTreasuryAddress>): EventEmitter;
    NewTreasuryAddress(
      options?: EventOptions,
      cb?: Callback<NewTreasuryAddress>
    ): EventEmitter;

    NewTreasuryGuardian(cb?: Callback<NewTreasuryGuardian>): EventEmitter;
    NewTreasuryGuardian(
      options?: EventOptions,
      cb?: Callback<NewTreasuryGuardian>
    ): EventEmitter;

    NewTreasuryPercent(cb?: Callback<NewTreasuryPercent>): EventEmitter;
    NewTreasuryPercent(
      options?: EventOptions,
      cb?: Callback<NewTreasuryPercent>
    ): EventEmitter;

    RepaySEB(cb?: Callback<RepaySEB>): EventEmitter;
    RepaySEB(options?: EventOptions, cb?: Callback<RepaySEB>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Failure", cb: Callback<Failure>): void;
  once(event: "Failure", options: EventOptions, cb: Callback<Failure>): void;

  once(event: "LiquidateSEB", cb: Callback<LiquidateSEB>): void;
  once(
    event: "LiquidateSEB",
    options: EventOptions,
    cb: Callback<LiquidateSEB>
  ): void;

  once(event: "MintFee", cb: Callback<MintFee>): void;
  once(event: "MintFee", options: EventOptions, cb: Callback<MintFee>): void;

  once(event: "MintSEB", cb: Callback<MintSEB>): void;
  once(event: "MintSEB", options: EventOptions, cb: Callback<MintSEB>): void;

  once(event: "NewComptroller", cb: Callback<NewComptroller>): void;
  once(
    event: "NewComptroller",
    options: EventOptions,
    cb: Callback<NewComptroller>
  ): void;

  once(event: "NewTreasuryAddress", cb: Callback<NewTreasuryAddress>): void;
  once(
    event: "NewTreasuryAddress",
    options: EventOptions,
    cb: Callback<NewTreasuryAddress>
  ): void;

  once(event: "NewTreasuryGuardian", cb: Callback<NewTreasuryGuardian>): void;
  once(
    event: "NewTreasuryGuardian",
    options: EventOptions,
    cb: Callback<NewTreasuryGuardian>
  ): void;

  once(event: "NewTreasuryPercent", cb: Callback<NewTreasuryPercent>): void;
  once(
    event: "NewTreasuryPercent",
    options: EventOptions,
    cb: Callback<NewTreasuryPercent>
  ): void;

  once(event: "RepaySEB", cb: Callback<RepaySEB>): void;
  once(event: "RepaySEB", options: EventOptions, cb: Callback<RepaySEB>): void;
}
